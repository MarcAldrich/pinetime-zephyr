<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Starting with some basic applications</title>
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="starting-with-some-basic-applications">
<h1>Starting with some basic applications</h1>
<p>The best way to get a feel of zephyr for the PineTime watch, is to start building applications.</p>
<p>The gpio ports, i2c communication, memory layout, stuff that is particular for the watch is defined in the board definition file.</p>
<p>The provided samples are standard zephyr application, with some minor modifications.</p>
<div class="section" id="blinky-example">
<h2>Blinky    example</h2>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">The</span> <span class="n">watch</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">contain</span> <span class="n">a</span> <span class="n">led</span> <span class="k">as</span> <span class="n">such</span><span class="p">,</span> <span class="n">but</span> <span class="n">it</span> <span class="n">has</span> <span class="n">background</span> <span class="n">leds</span> <span class="k">for</span> <span class="n">the</span> <span class="n">LCD</span><span class="o">.</span>

<span class="n">Once</span> <span class="n">lit</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">barely</span> <span class="n">see</span> <span class="n">it</span><span class="p">,</span> <span class="n">cause</span> <span class="n">the</span> <span class="n">screen</span><span class="o">-</span><span class="n">LCD</span> <span class="n">remains</span> <span class="n">black</span><span class="o">.</span>

<span class="n">The</span> <span class="n">screen</span> <span class="n">contains</span> <span class="n">three</span> <span class="n">leds</span><span class="p">,</span> <span class="n">this</span> <span class="n">way</span> <span class="n">the</span> <span class="n">intensity</span> <span class="ow">is</span> <span class="nb">set</span><span class="o">.</span>
</pre></div>
</div>
<p>have a look at the pinetime.dts file, here you see the definition of the background leds.</p>
<p><cite>building an image, which can be found under the build directory</cite></p>
<p>see : <a class="reference internal" href="samples/basic/blinky/README.xhtml#blinky-sample"><span class="std std-ref">Blinky Application</span></a></p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> ~/work/pinetime
<span class="gp">$</span> west build -p -b pinetime samples/basic/blinky
</pre></div>
</div>
<p>once the compilation is completed,  you can find the firmware under :
~/work/pinetime/build/zephyr/zephyr.bin</p>
</div>
<div class="section" id="reading-out-the-button-on-the-watch">
<h2>Reading out the button on the watch</h2>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">The</span> <span class="n">pinetime</span> <span class="n">does</span> <span class="n">have</span> <span class="n">a</span> <span class="n">button</span> <span class="n">on</span> <span class="n">the</span> <span class="n">side</span><span class="o">.</span>

<span class="n">In</span> <span class="n">order</span> <span class="n">to</span> <span class="n">check</span> <span class="k">if</span> <span class="n">the</span> <span class="n">button</span> <span class="ow">is</span> <span class="n">pressed</span><span class="p">,</span> <span class="n">it</span> <span class="n">sets</span> <span class="n">a</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">memory</span><span class="o">.</span>
<span class="n">With</span> <span class="n">openocd</span> <span class="n">you</span> <span class="n">can</span> <span class="n">peek</span> <span class="n">at</span> <span class="n">this</span> <span class="n">memory</span> <span class="n">location</span><span class="o">.</span>
</pre></div>
</div>
<div class="section" id="building-and-running">
<h3>Building and Running</h3>
<p>see : <a class="reference internal" href="samples/basic/button/README.xhtml#button-sample"><span class="std std-ref">Button demo</span></a></p>
<p><em>Note:</em>:
<cite>The watch has a button out port (15) and button in port (13). You have to set the out-port high. Took me a while to figure this outâ€¦</cite></p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">west build -p -b pinetime samples/basic/button</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>#define MY_REGISTER (*(volatile uint8_t*)0x2000F000)</p>
<p>in the program you can set values:
MY_REGISTER=(read button value);</p>
<p>this way you know till whether the code executes</p>
</div>
<p>a way to set port 15 high (hard-coded of course :))</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">gpio_pin_configure(gpiob, 15,GPIO_DIR_OUT); //push button out</span>
<span class="go">gpio_pin_write(gpiob, 15, &amp;button_out); //set port high</span>
</pre></div>
</div>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">#</span>telnet <span class="m">127</span>.0.0.1 <span class="m">4444</span>
</pre></div>
</div>
<p>Peeking</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">once your telnet sessions started:</span>
<span class="go">Trying 127.0.0.1...</span>
<span class="go">Connected to 127.0.0.1.</span>
<span class="go">Escape character is &#39;^]&#39;.</span>
<span class="go">Open On-Chip Debugger</span>
<span class="gp">&gt;</span>mdw 0x2000F000 0x1
<span class="go">0x2000f000: 00000100 (switch pushed)</span>
</pre></div>
</div>
</div>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>